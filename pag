#!/usr/bin/python
# paginate text into pages

# This program takes in a prose text file where each line is assumed to be less than the width of the page.
# Use a typesetter like `typ`, `fmt`, or `fold` to achieve this
# It then outputs a modified text file, where pages are separated by formfeeds and each has a header.
import datetime
import getopt
import stat
import os
import sys
import string

HEADER_MODE = True
MLA_HEADER_MODE = False
US_MODE = True
NAME = ""
TODAY = datetime.datetime.today()

FIRST_PAGE_NUMBER = 1
PAGE_LENGTH = 66  # Three lines taken off for spacing at the bottom
# These two are only used for right-aligning page number
PAGE_WIDTH = 84
MARGIN_WIDTH = 0

short_options = "HL:mM:n:N:Uw:hv"
long_options = [
    "no-header-mode",
    "page-length=",
    "mla-header-mode",
    "margin-width=",
    "first-page-number=",
    "name",
    "no-us-mode",
    "page-width=",
    "help",
    "version",
]

try:
    options, positional_arguments = getopt.gnu_getopt(
        sys.argv[1:], short_options, long_options
    )
except getopt.GetoptError as error:
    print(f"pag: '-{error.opt}': Option not recognized")
    sys.exit(1)

for option in options:
    argument = option[1]
    option = option[0]

    if option == "-h" or option == "--help":
        print("Usage: pag [OPTION]... [FILE]")
        print("Paginate a document")
        sys.exit(0)
    elif option == "-v" or option == "--version":
        print("pag v1.0.0")
        sys.exit(0)
    elif option == "-H" or option == "--no-header-mode":
        HEADER_MODE = False
    elif option == "-L" or option == "--page-length":
        try:
            PAGE_LENGTH = int(argument)
            if PAGE_LENGTH < 2:
                raise ValueError
        except ValueError:
            print(f"pag: '{PAGE_LENGTH}': Invalid page length")
            sys.exit(1)
    elif option == "-m" or option == "--mla-header-mode":
        MLA_HEADER_MODE = True
    elif option == "-M" or option == "--margin-width":
        try:
            MARGIN_WIDTH = int(argument)
            if MARGIN_WIDTH < 0:
                raise ValueError
        except ValueError:
            print(f"pag: '{MARGIN_WIDTH}': Invalid page length")
            sys.exit(1)
    elif option == "-n" or option == "--first-page-number":
        try:
            FIRST_PAGE_NUMBER = int(argument)
            if FIRST_PAGE_NUMBER < 0:
                raise ValueError
        except ValueError:
            print(f"pag: '{FIRST_PAGE_NUMBER}': Invalid page number")
            sys.exit(1)
    elif option == "-N" or option == "--name":
        NAME = argument.strip().split(" ")[-1]
    elif option == "-w" or option == "--page-width":
        try:
            PAGE_WIDTH = int(argument)
            if PAGE_WIDTH < 8:
                raise ValueError
        except ValueError:
            print(f"pag: '{PAGE_WIDTH}': Invalid page width")
            sys.exit(1)


if PAGE_LENGTH < 10:
    HEADER_MODE = False

# For the footer and header blank lines
PAGE_LENGTH -= 3

if not positional_arguments:
    if stat.S_ISFIFO(os.fstat(0).st_mode):
        input_file = "-"
    else:
        print("pag: Missing operand")
        sys.exit(1)
else:
    if len(positional_arguments) > 1:
        print("pag: Too many arguments")
        sys.exit(1)
    else:
        input_file = positional_arguments[0]

if input_file == "-":
    all_lines = sys.stdin.read().splitlines()
else:
    if os.path.isfile(input_file):
        pass
    elif os.path.isfile(f"{os.getcwd}/{input_file}"):
        input_file = f"{os.getcwd}/{input_file}"
    elif os.path.isdir(input_file) or os.path.isdir(f"{os.getcwd}/{input_file}"):
        print(f"pag: {input_file}: Is a directory")
        sys.exit(1)
    else:
        print(f"pag: {input_file}: No such file or directory")
        sys.exit(1)

    with open(input_file, mode="r", encoding="utf8") as text_file:
        all_lines = text_file.read().splitlines()

page_number = FIRST_PAGE_NUMBER
lines_on_page = 0
in_header = True
for line in all_lines:
    if HEADER_MODE and in_header:
        if not MLA_HEADER_MODE:
            print(
                f"\n{' ' * MARGIN_WIDTH}{TODAY.month if US_MODE else TODAY.day}/{TODAY.day if US_MODE else TODAY.month}/{TODAY.year}{' '*(PAGE_WIDTH - MARGIN_WIDTH * 2 - 14 - (4 - len(NAME if NAME else 'Page')) - len(str(page_number)))}{NAME if NAME else 'Page'} {page_number}\n"
            )
            lines_on_page += 1
            in_header = False
        else:
            if lines_on_page == 0:
                if not NAME and page_number == 1:
                    NAME = line.strip().split(" ")[-1]
                print(
                    f"\n{' '*(PAGE_WIDTH - MARGIN_WIDTH * 2 - len(NAME) - len(str(page_number)))}{NAME} {page_number}"
                )
                print(line)
                lines_on_page += 2
                continue
            if page_number == 1 and lines_on_page <= 6:
                if 2 < lines_on_page < 4:
                    print(line)
                    lines_on_page += 1
                    continue
                elif lines_on_page == 5:
                    print(line.lower().title())
                    lines_on_page += 1
                    continue
                elif lines_on_page == 6 and not line:
                    lines_on_page += 1
                    in_header = False
                    continue

    print(line)
    lines_on_page += 1
    if lines_on_page == PAGE_LENGTH:
        print("\f", end="")
        in_header = True
        lines_on_page = 0
        page_number += 1
